@import 'src/scss/base';

:host {
    display: inline-flex;

    *,
    *::before,
    *::after {
        box-sizing: border-box;
    }
}

.btn {
    --button-color: #{$primary};
    --button-color-hover: #{$primary-dark};
    --button-color-disabled: #{$primary-light};

    &input[type='button']::-moz-focus-inner {
        padding: 0;
        border: 0;
    }
    &button::-moz-focus-inner {
        padding: 0;
        border: 0;
    }

    position: relative;
    font-size: 0.9375rem;
    font-weight: 600;
    line-height: 1.5rem;
    text-align: center;
    white-space: nowrap;
    cursor: pointer;
    border: 1px solid;
    border-color: var(--button-color);
    border-radius: $app-border-radius;
    padding: 7px 24px;
    color: var(--button-color);
    background: #fff;
    user-select: none;
    transition: all $app-transition;
    text-decoration: none;
    text-transform: uppercase;

    &,
    &:active,
    &.active,
    &:focus {
        outline: none;
    }

    &:hover,
    &:focus {
        text-decoration: none;
    }

    &:disabled {
        cursor: default;
    }
    &.disabled {
        opacity: 0.7;
    }

    &,
    .btn-inner,
    .btn-inner span {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        flex: 1;
    }

    ::ng-deep svg {
        margin-right: 8px;
    }

    // MINI INLINE LOADER
    .btn-inner.mini-loader {
        position: relative;

        span {
            opacity: 0;
        }

        &::before,
        &::after {
            content: '';
            position: absolute;
            display: block;
            top: 50%;
            left: 50%;
            margin: -12px 0 0 -12px;
            width: 24px;
            height: 24px;
            border-radius: 50%;
        }
        &::before {
            border: 3px solid currentColor;
            opacity: 0.25;
        }
        &::after {
            border: 3px solid transparent;
            border-left-color: currentColor;
            transform: translateZ(0);
            animation: mini-loader 1.1s infinite linear;
        }
    }
}

@keyframes mini-loader {
    0% {
        transform: rotate(0deg);
    }
    100% {
        transform: rotate(360deg);
    }
}

///////////////////
// SIZE VARIANTS //
///////////////////
.btn-large {
    padding: 12px 26px;
    font-size: 1.25rem;

    ::ng-deep svg {
        margin-right: 10px;
    }
}

/////////////////////
// FULL COLOR TYPE //
/////////////////////
.btn-full-color {
    background: var(--button-color);
    color: #fff;
    border-color: var(--button-color);

    &:not(:disabled):focus-visible,
    &:not(:disabled):hover {
        background: var(--button-color-hover);
        border-color: var(--button-color-hover);
    }
    &.btn-disabled {
        background: var(--button-color-disabled);
        border-color: var(--button-color-disabled);
    }
}

//////////////////
// OUTLINE TYPE //
//////////////////
.btn-outline {
    background: #fff;
    color: var(--button-color);
    border-color: var(--button-color);

    &:not(:disabled):focus-visible,
    &:not(:disabled):hover {
        background: var(--button-color);
        color: #fff;
    }
    &.btn-disabled {
        color: var(--button-color-disabled);
        border-color: var(--button-color-disabled);
    }
}

////////////////////
// COLOR VARIANTS //
////////////////////
.btn-primary {
    --button-color: #{$primary};
    --button-color-hover: #{$primary-dark};
    --button-color-disabled: #{$primary-light};
}
.btn-danger {
    --button-color: #{$red};
    --button-color-hover: #{darken($red, 12%)};
    --button-color-disabled: #{desaturate(lighten($red, 30%), 40%)};
}
.btn-primary-dark {
    --button-color: #{$primary-dark};
    --button-color-hover: #{darken($primary-dark, 12%)};
    --button-color-disabled: #{desaturate(lighten($primary-dark, 30%), 40%)};
    border-color: $grey-EA;
}

/* Add new color variants here. It will apply to both full-color and outline button types. */
